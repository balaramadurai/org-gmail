#+TITLE: org-gmail: Fetch Gmail Threads into Org Mode

* Introduction

org-gmail is a package for Emacs that allows you to fetch entire Gmail threads or individual messages and save them as entries in your Org mode files. It uses the Gmail API via a companion Python script.

* Features

- Create and delete labels in Gmail.
- Download all emails with a specific label, chosen from a list fetched directly from Gmail.
- Sync all previously downloaded labels to fetch new emails. This works by finding all `:LABEL:` properties in your agenda files, so you can refile and reorganize your emails without breaking the sync. You can also configure a list of labels to ignore during this process.
- Edit a thread's label at point, updating it in Gmail and across all your Org files.
- Bulk move all threads from one label to another. If the destination label doesn't exist, it will be created for you. This updates both Gmail and all corresponding `:LABEL:` properties in your Org files.
- Download new messages for a specific thread.
- Insert new messages directly after the existing thread in your Org file.
- Move messages or entire threads to the trash in Gmail.
- Defer (snooze) emails in Gmail.
- Reply to and delegate (forward) emails directly from Emacs.
- Create actionable sub-tasks for emails that will appear in your agenda.

* Optional Features (with suggested configuration)

- Create and insert internal links (`org-gmail:`) between email entries (requires `org-ql`).
- A Hydra menu for quick access to all commands (requires `hydra`).

* Installation

** 1. Python Dependencies

This package relies on a Python script with a few dependencies. You can install them using pip:

#+BEGIN_SRC sh
pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib html2text pytz
#+END_SRC

** 2. Gmail API Credentials

You'll need to enable the Gmail API and download a `credentials.json` file.

1. Go to the [[https://console.developers.google.com/][Google Cloud Console]].
2. Create a new project.
3. Enable the "Gmail API" for your project.
4. Create credentials for a "Desktop app".
5. Download the `credentials.json` file.

** 3. Emacs Package Installation

This package is designed to be installed with `straight.el`. Add the following to your Emacs configuration. Make sure to replace `"your-username/your-repo-name"` with your actual GitHub repository details.

#+BEGIN_SRC emacs-lisp
  (use-package org-gmail
    :straight (org-gmail :type git :host github :repo "balaramadurai/org-gmail")
    :commands (org-gmail-create-label
               org-gmail-delete-label
               org-gmail-download-by-label
               org-gmail-download-at-point
               org-gmail-sync-labels
               org-gmail-sync-email-ids
               org-gmail-trash-at-point
               org-gmail-defer-at-point
               org-gmail-reply-at-point
               org-gmail-delegate-at-point
               org-gmail-copy-link-at-point
               org-gmail-insert-link
               org-gmail-edit-label-at-point
               org-gmail-bulk-move-labels
               org-gmail-add-action-at-point)
    :config
    (setq org-gmail-org-file "~/Documents/0Inbox/index.org")
    (setq org-gmail-credentials-file "~/path/to/your/credentials.json")
    (setq org-gmail-python-script "gmail_label_manager.py")
    (setq org-gmail-date-drawer "org-gmail")
    (setq org-gmail-process-timeout 300)
    ;; Optional: Configure labels to ignore during sync
    (setq org-gmail-sync-ignore-labels '("^4Archives/" "^3Resources/"))
    )
#+END_SRC

* Usage

You can call the functions individually or use the optional Hydra menu for quick access.

** Main Commands:
- `M-x org-gmail-create-label`: Create a new label in Gmail.
- `M-x org-gmail-delete-label`: Delete a label from Gmail.
- `M-x org-gmail-download-by-label`: Fetches a list of your Gmail labels and prompts you to select one to download.
- `M-x org-gmail-sync-labels`: Finds all labels you have previously downloaded (by looking for `:LABEL:` properties) and fetches new emails for them.
- `M-x org-gmail-edit-label-at-point`: Move the thread at point to a new label by editing the current label name.
- `M-x org-gmail-bulk-move-labels`: Move all threads from one label to another.
- `M-x org-gmail-download-at-point`: Download new messages for the thread at point.
- `M-x org-gmail-sync-email-ids`: Sync and find duplicate email IDs.
- `M-x org-gmail-trash-at-point`: Move the email or thread at point to the trash.
- `M-x org-gmail-add-action-at-point`: Create an actionable sub-task for the email at point.
- `M-x org-gmail-defer-at-point`: Defer (snooze) an email in Gmail.
- `M-x org-gmail-reply-at-point`: Reply to an email.
- `M-x org-gmail-delegate-at-point`: Delegate (forward) an email.

** Link Commands:
- `M-x org-gmail-copy-link-at-point`: Copies a `org-gmail:` link for the email at point.
- `M-x org-gmail-insert-link`: Inserts a `org-gmail:` link to an email you select from a list.

* Suggested Configuration (Optional)

If you have the `hydra` and `org-ql` packages installed, you can add the following to your configuration for an enhanced experience.

** Hydra Menu

This provides a convenient pop-up menu with single-key shortcuts for all `org-gmail` commands.

#+BEGIN_SRC emacs-lisp
(use-package hydra)
(defhydra org-gmail-hydra (:color blue :hint nil)
  "
^Org-Gmail^
----------------------------------------------------------------
_d_: Download by label      _e_: Edit label at point     _l_: Copy link
_D_: Download at point      _b_: Bulk move labels          _L_: Insert link
_s_: Sync labels            _c_: Create label              _x_: Delete label
_S_: Sync email IDs         _t_: Trash at point            _a_: Add action
_r_: Reply                  _f_: Delegate (forward)      _z_: Defer (snooze)
_q_: Quit
"
  ("d" org-gmail-download-by-label)
  ("D" org-gmail-download-at-point)
  ("s" org-gmail-sync-labels)
  ("S" org-gmail-sync-email-ids)
  ("e" org-gmail-edit-label-at-point)
  ("b" org-gmail-bulk-move-labels)
  ("c" org-gmail-create-label)
  ("x" org-gmail-delete-label)
  ("t" org-gmail-trash-at-point)
  ("l" org-gmail-copy-link-at-point)
  ("L" org-gmail-insert-link)
  ("a" org-gmail-add-action-at-point)
  ("r" org-gmail-reply-at-point)
  ("f" org-gmail-delegate-at-point)
  ("z" org-gmail-defer-at-point)
  ("q" nil "quit"))

(defun org-gmail-hydra ()
  "Show the org-gmail hydra menu."
  (interactive)
  (org-gmail-hydra/body))
#+END_SRC

** Custom Links

This enables `org-gmail:` links, allowing you to jump directly to an email entry from anywhere in your Org files.

#+BEGIN_SRC emacs-lisp
(use-package org-ql
  :config
  (defun org-gmail-open-link (email-id)
    "Open the Org entry corresponding to the EMAIL-ID."
    (let ((results (org-ql-select (org-agenda-files)
                     `(property "EMAIL_ID" ,email-id)
                     :action 'markers)))
      (if (not results)
          (message "No email found with ID: %s" email-id)
        (let* ((marker (car results))
               (buffer (marker-buffer marker))
               (pos (marker-position marker)))
          (switch-to-buffer buffer)
          (goto-char pos)))))
  (org-link-set-parameters "org-gmail" :follow #'org-gmail-open-link))
#+END_SRC

* Use Cases

** Getting Things Done (GTD)

`org-gmail` is a great fit for a GTD workflow. You can process your Gmail inbox and convert actionable emails into Org Mode tasks.

1.  **Process Inbox:** In Gmail, apply a label like `ToProcess` to emails that require action.
2.  **Download:** Use `M-x org-gmail-download-by-label` to pull all emails with the `ToProcess` label into your `index.org` file.
3.  **Refile:** Go through the new entries in your inbox file. For each one, you can:
    -   **Delete:** If it's not needed, use `M-x org-gmail-trash-at-point`.
    -   **Defer:** If it's not actionable now, use `M-x org-gmail-defer-at-point` to snooze it.
    -   **Do (Reply):** If it takes less than 2 minutes, reply directly with `M-x org-gmail-reply-at-point`.
    -   **Delegate:** If it's for someone else, forward it with `M-x org-gmail-delegate-at-point`.
    -   **To-Do:** If it's a larger task, use `M-x org-gmail-add-action-at-point` to create a `TODO` sub-task that will appear in your agenda.

** P.A.R.A. Method

The P.A.R.A. (Projects, Areas, Resources, Archives) method is also well-supported.

1.  **Labeling:** In Gmail, use labels that match your P.A.R.A. structure (e.g., `1Projects/ClientWebsite`, `2Areas/Finances`, `3Resources/Emacs`).
2.  **Download:** Use `M-x org-gmail-download-by-label` to download emails related to a specific project or area.
3.  **Lifecycle Management:** When a project is finished, use `M-x org-gmail-bulk-move-labels` to move all threads from `1Projects/ClientWebsite` to `4Archives/2025/ClientWebsite`. This automatically updates both Gmail and all the `:LABEL:` properties in your Org files, keeping everything in sync.

* Comparison with Other Emacs Mail Clients

** Gnus, mu4e, notmuch

These are powerful, full-featured email clients inside Emacs. They are designed to manage your entire email workflow: reading, writing, sending, and organizing.

** org-gmail

`org-gmail` is not a replacement for a full mail client. Instead, it's a tool for *integrating* your most important emails into your Org Mode knowledge base.

-   **Focus:** `org-gmail` is focused on pulling email content into Org Mode so it can be linked to tasks, notes, and other parts of your system.
-   **Workflow:** The intended workflow is to do your initial email triage in the Gmail web interface (or another client) and then use `org-gmail` to pull in the threads that are relevant to your projects and long-term notes.
-   **Strength:** Its strength is its deep integration with Org Mode's structure and linking capabilities, not in managing your day-to-day email flow.
